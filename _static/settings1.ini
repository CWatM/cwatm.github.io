# ------------------------------------------------

######## ##          ##  ####  ######  ##    ##
##       ##          ## ##  ##   ##   ####  ####
##        ##        ##  ##  ##   ##   ## #### ##
##        ##   ##   ## ########  ##  ##   ##   ##
##         ## #### ##  ##    ##  ##  ##        ##
##         ####  #### ##      ## ## ##          ##
##########  ##    ##  ##      ## ## ##          ##

# Community Water Model Version 0.99
# SETTINGS FILE
# ------------------------------------------------

#-------------------------------------------------------
# OPTION - to switch on/off
#-------------------------------------------------------

[OPTIONS]
#-----------------------------------------------

# Data otions
# if temperature is stored in Kelvin instead Celsius
TemperatureInKelvin = True
# if lat/lon the area has to be user defined = precalculated
gridSizeUserDefined = True

#-----------------------------------------------
# Evaporation: calculate pot. evaporation (True) or use precalculated pot.evaporation map stacks (False)
calc_evaporation = True

#-----------------------------------------------
# Irrigation

# if irragation is included 
includeIrrigation = True
# if irrigation area can vary from your to year
dynamicIrrigationArea = True

# Water demand
# if water demand from industry and domestic is included
includeWaterDemandDomInd = False
# Water allocation
# if water demand and availability is calculated for region to compare demand vs. avail
usingAllocSegments = False
# limit abstraction to availale groundwater (False) include fossil groundwater (True)
limitAbstraction = False

#-----------------------------------------------
# Soil 
# use preferential flow, that bypasses the soil matrix and drains directly to the groundwater (not for irrPaddy)
preferentialFlow = True
# Capillar rise
CapillarRise = True

#-----------------------------------------------
# Routing

# if runoff concentration to the edge of a cell is included
includeRunoffConcentration = True
# Waterbodies like lakes and reservoirs
includeWaterBodies = True
# kinemtatic wave routing, if False no routing is calculated
includeRouting = True

# Inflow from outside of the modelled area
inflow = False

# --- Reporting & Debugging -------------------
# ----------------------------------------------
# Reporting options
writeNetcdfStack = True
reportMap = True
reportTss = True

#-----------------------------------------------
# Checking water balance
calcWaterBalance = False
sumWaterBalance = False

# calculate Budyko coefficient for calibration
budyko = False

# use additional PCRaster GIS commands
PCRaster = False


#-------------------------------------------------------
# BASIC DEFINITIONS
#-------------------------------------------------------
[BASICS]
PathRoot = C:/work

#-------------------------------------------------------
[FILE_PATHS]
#-------------------------------------------------------

PathOut = $(BASICS:PathRoot)/output2
PathMaps = M:/pcrglob_inputNetcdf
PathMeteo = M:/climate/Isi-Mip2/wfdei
#-------------------------------------------------------
[NETCDF_ATTRIBUTES]
institution = IIASA
title = Global Water Model - WATCH WDFEI
metaNetcdfFile = $(BASICS:PathRoot)/CWATM/source/metaNetcdf.xml


#-------------------------------------------------------
# AREA AND OUTLETS
#-------------------------------------------------------
[MASK_OUTLET]

# Area mask
# A pcraster map, tif or netcdf map e.g.  $(BASICS:PathRoot)/data/areamaps/area_indus.map
# or a retancle: Number of Cols, Number of rows, cellsize, upper left corner X, upper left corner Y 
MaskMap = $(BASICS:PathRoot)/data/areamaps/lobith.tif

#-------------------------------------------------------
# Station data
# either a map e.g. $(BASICS:PathRoot)/data/areamaps/area3.map
# or a location coordinates (X,Y) e.g. 5.75 52.25 9.25 49.75 )

# Lobith/Rhine
Gauges  = 6.25 51.75 6.25 48.25

# if .tif file for gauges, this is a flag if the file is global or local
# e.g. Gauges = $(BASICS:PathRoot)/data/areamaps/gaugesRhine.tif
GaugesLocal = True

#-------------------------------------------------------
[TIME-RELATED_CONSTANTS]
#-------------------------------------------------------

# StepStart and Stepend either dates e.g. 01/06/1990
# or numbers (but then CalendarDayStart has to be defined) 
# SpinUp: from this date output is generated (up to this day: warm up)
CalendarDayStart = 01/01/1990

StepStart = 01/01/1990
SpinUp =  01/01/1995 
StepEnd =  31/12/2010

#-------------------------------------------------------
[INITITIAL CONDITIONS]
#-------------------------------------------------------

# for a warm start initial variables a loaded
# e.g for a start on 01/01/2010 load variable from 31/12/2009
load_initial = False
initLoad = $(BASICS:PathRoot)/init/Rhine_20030131.nc

# saving variables from this run, to initiate a warm start next run
# StepInit = saving date, can be more than one: 10/01/1973 20/01/1973
save_initial = True
initSave = $(BASICS:PathRoot)/init/Rhine
StepInit = 31/12/1995 31/12/2010

#-------------------------------------------------------
# CALIBARTION PARAMETERS
#-------------------------------------------------------
[CALIBRATION]

# These are parameter which are used for calibration
# could be any parameter, but for an easier overview, tehey are collected here
# in the calibration template a placeholder (e.g. %arnoBeta) instead of value

# Snow  
SnowMeltCoef = 0.0037
# Cropf factor correction  
crop_correct =  1.73
#Soil
soildepth_factor = 1.60
#Soil preferentialFlowConstant = 4.0, arnoBeta_factor = 1.0
preferentialFlowConstant = 4.75
arnoBeta_factor = 0.62
# groundwater recessionCoeff_factor = 1.0
recessionCoeff_factor = 0.84
# runoff concentration factor runoffConc_factor = 1.0
runoffConc_factor = 0.89
#Routing manningsN Factor to Manning's roughness = 1.0
manningsN = 1.5
# reservoir  normal storage limit (fraction of total storage, [-]) [0.15 - 0.85] default 0.5
normalStorageLimit = 0.5
# lake parameter - factor to alpha: parameter of of channel width and weir coefficient  [0.33 - 3.] dafault 1.
lakeAFactor = 1.0

#-------------------------------------------------------
# TOPOGRAPHY MAPS
#-------------------------------------------------------
[TOPOP]
# local drain direction map (1-9)
Ldd = $(FILE_PATHS:PathMaps)/routing/lddsound_30min.map

# For water demand vs. availability: areas have to be aggregated
# Allocation map
Catchment = $(FILE_PATHS:PathMaps)/routing/catchment.map
#  region of interest e.g. Rhine
CatchmentNo = 650

# Elevation standard deviation [m], i.e. altitude difference elevation within pixel.
# Used for sub-pixel modelling of snow accumulation and melt
ElevationStD = $(FILE_PATHS:PathMaps)/others/elvstd.map
# Length of pixel [m]
# CellLength = $(FILE_PATHS:PathMaps)/others/pixleng.map
# Area of pixel [m2]
CellArea = $(FILE_PATHS:PathMaps)/routing/cellarea30min.map

#-------------------------------------------------------
# INPUT METEOROLOGICAL TIMESERIES AS MAPS
#-------------------------------------------------------
[METEO]
# precipitation [kg m-2 s-1]
PrecipitationMaps =  $(FILE_PATHS:PathMeteo)/pr.nc
# average daily temperature [K]
TavgMaps = $(FILE_PATHS:PathMeteo)/tavg.nc

# ----------------------------------------
# This is used if calc_evaporation = False

# daily reference evaporation (free water) 
E0Maps = $(FILE_PATHS:PathMeteo)/EWRef_daily.nc
# daily reference evapotranspiration (crop) 
ETMaps = $(FILE_PATHS:PathMeteo)/ETRef_daily.nc

# --------------------------------
# from kg m-2s-1 to m : 86.4
precipitation_coversion = 86.4

evaporation_coversion = 1.00

# OUTPUT maps and timeseries
OUT_Dir = $(FILE_PATHS:PathOut)
#OUT_MAP_Daily = 
#OUT_MAP_MonthEnd = Precipitation
#OUT_MAP_MonthTot = Precipitation
#OUT_MAP_MonthAvg = 

#OUT_TSS_Daily = Precipitation


#-------------------------------------------------------
# CALCULATE EVAPORATION - PENMAN - MONTEITH
#-------------------------------------------------------
[EVAPORATION]

# This is used if calc_evaporation = True
# use albedo maps
albedo = True
albedoMaps = $(FILE_PATHS:PathMaps)/landsurface/albedo/albedo.nc 

# if not albedo maps use fixed albedo
# Albedo of bare soil surface (Supit et. al.)
AlbedoSoil = 0.15
# Albedo of water surface (Supit et. al.)
AlbedoWater = 0.05
# Albedo of vegetation canopy (FAO,1998)
AlbedoCanopy = 0.23

# use specific humidity (TRUE) QAir,  or relative humidity (FALSE) - rhs
useHuss = False

# map stacks Temperature [K}]
TminMaps = $(FILE_PATHS:PathMeteo)/tmin.nc
TmaxMaps = $(FILE_PATHS:PathMeteo)/tmax.nc
# Instantaneous surface pressure[Pa]
PSurfMaps = $(FILE_PATHS:PathMeteo)/ps.nc
# 2 m istantaneous specific humidity[kg /kg] (QAir) or relative humidity [%] (rhs)
RhsMaps = $(FILE_PATHS:PathMeteo)/hurs.nc
# wind speed maps at 10m [m/s]
WindMaps = $(FILE_PATHS:PathMeteo)/wind.nc
# radiation surface downwelling shortwave maps  [W/m2]
RSDSMaps = $(FILE_PATHS:PathMeteo)/rsds.nc
# radiation surface downwelling longwave maps [W/m2] [W/m2]
RSDLMaps = $(FILE_PATHS:PathMeteo)/rlds.nc

# OUTPUT maps and timeseries
OUT_Dir = $(FILE_PATHS:PathOut)
#OUT_MAP_Daily = Precipitation, runoff
#OUT_MAP_Daily = ETRef, EWRef
#OUT_TSS_Daily = Tavg, ETRef


#-------------------------------------------------------
[SNOW]
#-------------------------------------------------------

# Number of vertical Snow layers
NumberSnowLayers = 7
# up to which layer the ice melt is calculated with the middle temperature
GlacierTransportZone = 3

# Temperature lapse rate with altitude [deg C / m]
TemperatureLapseRate = 0.0065 
# Multiplier applied to precipitation that falls as snow
SnowFactor = 1.0
# Range [m C-1 d-1] of the seasonal variation, SnowMeltCoef is the average value
SnowSeasonAdj = 0.001
# Average temperature at which snow melts
TempMelt =1.0
# Average temperature below which precipitation is snow
TempSnow = 1.0
# Snow melt coefficient: default: 4.0 
# SRM: 0.0045 m/C/day ( = 4.50 mm/C/day), Kwadijk: 18 mm/C/month (= 0.59 mm/C/day)  
# See also Martinec et al., 1998.

# use in CALIBRATION -> copied to CALIBRATION
#SnowMeltCoef = 0.004
IceMeltCoef  = 0.007

#--------------------------------------------------------------
# INITIAL CONDITIONS - Initial snow depth in snow zone 1-7 [mm]
# here only 1 layer is shown, but there are up to 7
SnowCoverIni = NONE

OUT_Dir = $(FILE_PATHS:PathOut)
#OUT_MAP_Daily = SnowCover
#OUT_TSS_Daily  = SnowCover

[FROST]
# Snow water equivalent, (based on snow density of 450 kg/m3) (e.g. Tarboton and Luce, 1996)
SnowWaterEquivalent = 0.45
# Daily decay coefficient, (Handbook of Hydrology, p. 7.28)
Afrost = 0.97
# Snow depth reduction coefficient, [cm-1], (HH, p. 7.28)
Kfrost = 0.57
# Degree Days Frost Threshold (stops infiltration, percolation and capillary rise)
# Molnau and Bissel found a value 56-85 for NW USA.
FrostIndexThreshold = 56

#--------------------------------------------------------------
# INITIAL CONDITIONS (None either 0 or use init file)
FrostIndexIni = NONE



[LandCover]
PathLandcover = $(FILE_PATHS:PathMaps)/landsurface

coverTypes = forest, grassland, irrPaddy, irrNonPaddy, sealed, water
coverTypesShort = f, g, i, n, s, w
fractionLandcover = $(PathLandcover)/fractionLandcover.nc

# OUTPUT maps and timeseries
OUT_Dir = $(FILE_PATHS:PathOut)
#OUT_TSS_Daily = runoff

#-------------------------------------------------------
[SOIL]
#-------------------------------------------------------

PathTopo = $(FILE_PATHS:PathMaps)/landsurface/topo
PathSoil = $(FILE_PATHS:PathMaps)/landsurface/soil

# Topography mapsNetcdf/maps
# tangent slope, slope length and orographybeta 
tanslope = $(PathTopo)/tanslope.map
slopeLength = $(PathTopo)/slopeLength.map
orographyBeta = $(PathTopo)/orographyBeta.map
# maps of relative elevation above flood plains
relativeElevation = $(PathTopo)/dzRel_hydro1k.nc

# Soil hydraulic properties
airEntryValue1 = $(PathSoil)/airEntryValue1.map
airEntryValue2 = $(PathSoil)/airEntryValue2.map
poreSizeBeta1 = $(PathSoil)/poreSizeBeta1.map
poreSizeBeta2 = $(PathSoil)/poreSizeBeta2.map
resVolWC1 = $(PathSoil)/resVolWC1.map
resVolWC2 = $(PathSoil)/resVolWC2.map
satVolWC1 = $(PathSoil)/satVolWC1.map
satVolWC2 = $(PathSoil)/satVolWC2.map
KSat1 = $(PathSoil)/KSat1.map
KSat2 = $(PathSoil)/KSat2.map
percolationImp = $(PathSoil)/percolationImp.map

clappAddCoeff   = 3.0
matricSuctionFC = 1.0
matricSuction50 = 3.33
matricSuctionWP = 156.0
maxGWCapRise    = 5.0

# Soil depth
firstStorDepth = $(PathSoil)/firstStorDepth.map
secondStorDepth = $(PathSoil)/secondStorDepth.map
soilWaterStorageCap1 = $(PathSoil)/soilWaterStorageCap1.map
soilWaterStorageCap2 = $(PathSoil)/soilWaterStorageCap2.map

# preferential flow (between 1.0 and 8.0)
# used in CALIBRATION -> copied to CALIBRATION
#preferentialFlowConstant = 4.0

[forest]
PathForest = $(FILE_PATHS:PathMaps)/landcover/forest

# Parameters for the Arno's scheme:
forest_arnoBeta = 0
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

# other paramater values
forest_minTopWaterLayer = 0.0
forest_minCropKC        = 0.2
forest_minInterceptCap  = 0.001
forest_cropDeplFactor   = 0.0

forest_fracVegCover  = $(PathForest)/fracVegCover.map
forest_rootFraction1 = $(PathForest)/rootFraction1.map
forest_rootFraction2 = $(PathForest)/rootFraction2.map
forest_maxRootDepth  = $(PathForest)/maxRootDepth.map
forest_minSoilDepthFrac = $(PathForest)/minSoilDepthFrac.map
forest_maxSoilDepthFrac = $(PathForest)/maxSoilDepthFrac.map

forest_cropCoefficientNC = $(PathForest)/Global_CropCoefficientKc-Forest_30min.nc
forest_interceptCapNC    = $(PathForest)/interceptCapForest10days.nc

# initial conditions:
forest_interceptStorIni = NONE
forest_topWaterLayerIni = NONE
forest_soilStor[0]Ini = NONE
forest_soilStor[1]Ini = NONE
forest_soilStor[2]Ini = NONE
forest_interflowIni     = NONE


[grassland]
PathGrassland = $(FILE_PATHS:PathMaps)/landcover/grassland

# Parameters for the Arno's scheme:
grassland_arnoBeta = 0
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

# other paramater values
grassland_minTopWaterLayer = 0.0
grassland_minCropKC        = 0.2
grassland_minInterceptCap  = 0.001
grassland_cropDeplFactor   = 0.0

grassland_fracVegCover  = $(PathGrassland)/fracVegCover.map
grassland_rootFraction1 = $(PathGrassland)/rootFraction1.map
grassland_rootFraction2 = $(PathGrassland)/rootFraction2.map
grassland_maxRootDepth  = $(PathGrassland)/maxRootDepth.map
grassland_minSoilDepthFrac = $(PathGrassland)/minSoilDepthFrac.map
grassland_maxSoilDepthFrac = $(PathGrassland)/maxSoilDepthFrac.map

grassland_cropCoefficientNC = $(PathGrassland)/Global_CropCoefficientKc-grassland_30min.nc
grassland_interceptCapNC    = $(PathGrassland)/interceptCapGrassland10days.nc

# initial conditions:
grassland_interceptStorIni = NONE
grassland_topWaterLayerIni = NONE
grassland_soilStor[0]Ini = NONE
grassland_soilStor[1]Ini = NONE
grassland_soilStor[2]Ini= NONE
grassland_interflowIni     = NONE


[irrPaddy]
PathIrrPaddy = $(FILE_PATHS:PathMaps)/landcover/irrPaddy

# Parameters for the Arno's scheme:
irrPaddy_arnoBeta = 0
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

# other paramater values
irrPaddy_minTopWaterLayer = 0.0
irrPaddy_minCropKC        = 0.2
irrPaddy_minInterceptCap  = 0.001
irrPaddy_cropDeplFactor   = 0.0

irrPaddy_fracVegCover  = $(PathIrrPaddy)/fracVegCover.map
irrPaddy_rootFraction1 = $(PathIrrPaddy)/rootFraction1.map
irrPaddy_rootFraction2 = $(PathIrrPaddy)/rootFraction2.map
irrPaddy_maxRootDepth  = $(PathIrrPaddy)/maxRootDepth.map
irrPaddy_minSoilDepthFrac = $(PathIrrPaddy)/minSoilDepthFrac.map
irrPaddy_maxSoilDepthFrac = $(PathIrrPaddy)/maxSoilDepthFrac.map

irrPaddy_cropCoefficientNC = $(PathIrrPaddy)/Global_CropCoefficientKc-irrPaddy_30min.nc
irrPaddy_interceptCapNC    = $(PathIrrPaddy)/interceptCapInputirrPaddy366days.nc
irrPaddy_coverFractionNC   = $(PathIrrPaddy)/coverFractionInputirrPaddy366days.nc

# initial conditions:
irrPaddy_interceptStorIni = NONE
irrPaddy_topWaterLayerIni = NONE
irrPaddy_soilStor[0]Ini = NONE
irrPaddy_soilStor[1]Ini = NONE
irrPaddy_soilStor[2]Ini = NONE
irrPaddy_interflowIni     = NONE


[irrNonPaddy]
PathIrrNonPaddy = $(FILE_PATHS:PathMaps)/landcover/irrNonPaddy

# Parameters for the Arno's scheme:
irrNonPaddy_arnoBeta = 0
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

# other paramater values
irrNonPaddy_minTopWaterLayer = 0.0
irrNonPaddy_minCropKC        = 0.2
irrNonPaddy_minInterceptCap  = 0.001
irrNonPaddy_cropDeplFactor   = 0.0

irrNonPaddy_fracVegCover  = $(PathIrrNonPaddy)/fracVegCover.map
irrNonPaddy_rootFraction1 = $(PathIrrNonPaddy)/rootFraction1.map
irrNonPaddy_rootFraction2 = $(PathIrrNonPaddy)/rootFraction2.map
irrNonPaddy_maxRootDepth  = $(PathIrrNonPaddy)/maxRootDepth.map
irrNonPaddy_minSoilDepthFrac = $(PathIrrNonPaddy)/minSoilDepthFrac.map
irrNonPaddy_maxSoilDepthFrac = $(PathIrrNonPaddy)/maxSoilDepthFrac.map

irrNonPaddy_cropCoefficientNC = $(PathIrrNonPaddy)/Global_CropCoefficientKc-irrNonPaddy_30min.nc
irrNonPaddy_interceptCapNC    = $(PathIrrNonPaddy)/interceptCapInputirrNonPaddy366days.nc
irrNonPaddy_coverFractionNC   = $(PathIrrNonPaddy)/coverFractionInputirrNonPaddy366days.nc

# initial conditions:
irrNonPaddy_interceptStorIni = NONE
irrNonPaddy_topWaterLayerIni = NONE
irrNonPaddy_soilStor[0]Ini = NONE
irrNonPaddy_soilStor[1]Ini = NONE
irrNonPaddy_soilStor[2]Ini = NONE
irrNonPaddy_interflowIni     = NONE


[sealed]
PathSealed = $(FILE_PATHS:PathMaps)/landcover/sealed

sealed_minInterceptCap  = 0.001

# initial conditions:
sealed_interceptStorIni = NONE

[open_water]
PathWater = $(FILE_PATHS:PathMaps)/landcover/water

water_minInterceptCap  = 0.0


#-------------------------------------------------------
[INTERFLOW]
#-------------------------------------------------------
interflowTimeconstant = 10.0


#-------------------------------------------------------
[GROUNDWATER]
#-------------------------------------------------------

PathGroundwater = $(FILE_PATHS:PathMaps)/groundwater

recessionCoeff = $(PathGroundwater)/recessionCoeff.map
specificYield = $(PathGroundwater)/specificYield.map
kSatAquifer = $(PathGroundwater)/kSatAquifer.map

#--------------------------------------------------------------
# INITIAL CONDITIONS
storGroundwaterIni = NONE

#-------------------------------------------------------
[WATERDEMAND]
#-------------------------------------------------------

PathWaterdemand = $(FILE_PATHS:PathMaps)/landsurface/waterDemand

allocSegments = $(PathWaterdemand)/catchx.nc

domesticWaterDemandFile = $(PathWaterdemand)/domesticWaterDemand30ArcMin.nc
industryWaterDemandFile = $(PathWaterdemand)/industryWaterDemand30ArcMin.nc
historicalIrrigationArea = $(PathWaterdemand)/irrigationArea30ArcMin.nc


#-------------------------------------------------------
# RUNOFF CONCENTRATION
#-------------------------------------------------------
[RUNOFF_CONCENTRATION]

# using triagular weigthning method
# the bigger the factor, more lag time 
forest_runoff_peaktime = 1.0
grassland_runoff_peaktime = 0.5
irrPaddy_runoff_peaktime = 0.5
irrNonPaddy_runoff_peaktime = 0.5
sealed_runoff_peaktime = 0.15 
water_runoff_peaktime = 0.01

interflow_runoff_peaktime = 1.0
baseflow_runoff_peaktime = 2.0

# initial conditions:
# here only 1 layer is shown, but there are up to 10
runoff_concIni = NONE


#-------------------------------------------------------
# ROUTING MAPS and PARAMETERSD
#-------------------------------------------------------
[ROUTING]

PathRouting = $(FILE_PATHS:PathMaps)/routing2

# composite crop factors for WaterBodies 1 per month: 
# not used here but still in
cropCoefficientWaterNC   = $(PathRouting)/cropCoefficientForOpenWater.nc


# Number of substep per day
# should be 10 for 0.5 deg but 24 for 0.1 deg

NoRoutingSteps = 10
#kinematic wave parameter: 0.6 is for broad sheet flow
chanBeta = 0.6

# Channel gradient (fraction, dy/dx)
chanGrad = $(PathRouting)/changrad.nc
# Minimum channel gradient (for kin. wave: slope cannot be 0)
chanGradMin = 0.0001

#Channel Manning's n
chanMan = $(PathRouting)/chanman.nc
#Channel length [meters]
chanLength = $(PathRouting)/chanleng.nc
#Channel bottom width [meters]
chanWidth = $(PathRouting)/chanbw.nc
#Bankfull channel depth [meters]
chanDepth = $(PathRouting)/chanbnkf.nc

# initial conditions:
channelStorageIni        = NONE
riverbedExchangeIni      = NONE
dischargeIni             = NONE


OUT_Dir = $(FILE_PATHS:PathOut)
#OUT_MAP_Daily = discharge
#OUT_MAP_Daily = runoff
#OUT_MAP_MonthAvg = discharge
#OUT_TSS_Dailyq = runoff

OUT_TSS_Daily = discharge
#OUT_TSS_MonthEnd = discharge
#OUT_TSS_MonthTot = discharge
#OUT_TSS_MonthAvg = discharge
#OUT_TSS_AnnualAvg = discharge
#OUT_TSS_AnnualEnd = discharge


#-------------------------------------------------------
# LAKES AND RESERVOIRS
#-------------------------------------------------------
[LAKES_RESERVOIRS]

PathLakesRes = $(FILE_PATHS:PathMaps)/routing2/lakesreservoirs

# ID of every lake, reservoir from HydroLakes database
waterBodyID = $(PathLakesRes)/lakesResID.nc
# 1 for lake, 2 for reservoir, 3 for lake and reservoir
waterBodyTyp = $(PathLakesRes)/lakesResType.nc
# Avergae discharge from HydroLakes Database
waterBodyDis = $(PathLakesRes)/lakesResDis.nc

# Lakes surface area from HydroLakes Database 
waterBodyArea = $(PathLakesRes)/lakesResArea.nc
# a factor to scale the outlet of a lake
#lakeAFactor = 1.0  -> calibration

# Reservoirs
# reservoir volume from HydroLakes database
waterBodyVolRes = $(PathLakesRes)/lakesResVolRes.nc
# reservoir starting year from HydroLakes database 
waterBodyYear = $(PathLakesRes)/lakesResYear.nc

#  Conservative, normal and flood storage limit (fraction of total storage, [-])
conservativeStorageLimit = 0.1
#normalStorageLimit = 0.5   # --> put into calibration
floodStorageLimit = 0.9
# adjusting the balance between normal and flood storage
# [0 ..1]  0: NormalstorageLimit      1: (= closer to flood) results in keeping the normal qoutflow longer constant
adjust_Normal_Flood = 0.5

# Minimum, Normal and Non-damaging reservoir outflow  (fraction of average discharge, [-])
MinOutflowQ = 0.2
NormalOutflowQ = 1.0
NonDamagingOutflowQ = 4.0


# initial conditions:
lakeInflowIni        = NONE
lakeStorageIni       = NONE
outLakeIni           = NONE
lakeOutflowIni       = NONE
reservoirStorageIni  = NONE


#-------------------------------------------------------
[INFLOW]
#-------------------------------------------------------

# if option inflow = true
# the inflow from outside is added at inflowpoints

# OPTIONAL: nominal map with locations of (measured)inflow hydrographs [cu m / s]
InflowPoints = $(FILE_PATHS:PathMaps)/others/inflowpoints.map
# OPTIONAL: observed or simulated input hydrographs as time series [cu m / s]
#Note that identifiers in time series correspond to InflowPoints
QInTS = nile_assiut.tss



