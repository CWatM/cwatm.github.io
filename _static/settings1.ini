# ------------------------------------------------

######## ##          ##  ####  ######  ##    ##
##       ##          ## ##  ##   ##   ####  ####
##        ##        ##  ##  ##   ##   ## #### ##
##        ##   ##   ## ########  ##  ##   ##   ##
##         ## #### ##  ##    ##  ##  ##        ##
##         ####  #### ##      ## ## ##          ##
##########  ##    ##  ##      ## ## ##          ##

# Community Water Model Version 0.99
# SETTINGS FILE
# ------------------------------------------------


#-------------------------------------------------------
# OPTION - to switch on/off
#-------------------------------------------------------

[OPTIONS]
TemperatureInKelvin = False
gridSizeUserDefined = True

writeNetcdfStack = True

includeWaterDemandDomInd = True

includeIrrigation = True
dynamicIrrigationArea = True

# have to check what this is doing
limitAbstraction = False

inflow = False

includeWaterBodies = True

reportMap = True
reportTss = True

calcWaterBalance = True
sumWaterBalance = True

#-------------------------------------------------------
# BASIC DEFINITIONS
#-------------------------------------------------------
[BASICS]
PathRoot = C:\work

#-------------------------------------------------------
# AREA AND OUTLETS
#-------------------------------------------------------
[MASK_OUTLET]

# A pcraster map e.g.  $(BASICS:PathRoot)\data\areamaps\area_indus.map
# or a retancle: Number of Cols, Number of rows, cellsize, upper left corner X, upper left corner Y 

#MaskMap = $(BASICS:PathRoot)\data\areamaps\area_indus.map      ; Cut out Indus only
#MaskMap = $(BASICS:PathRoot)\data\areamaps\area3.map
# Indus
#MaskMap = 30 20 0.5 65 38 
# Rhine
MaskMap = 30 20 0.5 3 54

# Station data
# either a map e.g. $(BASICS:PathRoot)\data\areamaps\area3.map
# or a location coordinates (X,Y) e.g. 5.75 52.25 9.25 49.75 )

#Gauges = $(BASICS:PathRoot)\data\areamaps\station8.map
# Rhine 
Gauges  = 5.75 52.25 9.25 49.75

#-------------------------------------------------------
[TIME-RELATED_CONSTANTS]
#-------------------------------------------------------

# StepStart and Stepend either dates e.g. 01/06/1990
# or numbers (but then CalendarDayStart has to be defined) 

CalendarDayStart = 01/06/1990
StepStart = 01/06/1990
SpinUp = None
StepEnd =  365
#StepEnd =   30/06/1990


#-------------------------------------------------------
[FILE_PATHS]
#-------------------------------------------------------

PathOut = $(BASICS:PathRoot)\output
PathMaps = $(BASICS:PathRoot)\data\mapsNetcdf\maps
PathMaps2 = M:\pcrglob_inputNetcdf
PathMeteo = M:\climate\Isi-Mip1\hadgem2-es\historical

#-------------------------------------------------------
[INITITIAL CONDITIONS]
#-------------------------------------------------------

load_initial = False
initLoad = $(BASICS:PathRoot)\init\testRhine_19900630.nc

save_initial = False
initSave = $(BASICS:PathRoot)\init\testRhine
StepInit = 30/06/1990

#-------------------------------------------------------
[NETCDF_ATTRIBUTES]
institution = IIASA
title = Demo Global Water Model
metaNetcdfFile = $(BASICS:PathRoot)\CWATM\source\metaNetcdf.xml



#-------------------------------------------------------
# TOPOGRAPHY MAPS
#-------------------------------------------------------
[TOPOP]
# local drain direction map (1-9)
Ldd = $(FILE_PATHS:PathMaps2)\routing\lddsound_30min.map

Catchment = $(FILE_PATHS:PathMaps2)\routing\catchment4.map
# Rhine
CatchmentNo = 650


# Elevation standard deviation [m], i.e. altitude difference elevation within pixel.
# Used for sub-pixel modelling of snow accumulation and melt
ElevationStD = $(FILE_PATHS:PathMaps)\elvstd.map
# Length of pixel [m]
# CellLength = $(FILE_PATHS:PathMaps)\pixleng.map
# Area of pixel [m2]
CellArea = $(FILE_PATHS:PathMaps2)\routing\cellarea30min.map

#-------------------------------------------------------
# INPUT METEOROLOGICAL TIMESERIES AS MAPS
#-------------------------------------------------------
[METEO]
# precipitation [mm/day]
#PrecipitationMaps = $(FILE_PATHS:PathMeteo)\pr
PrecipitationMaps = C:/PCRGlobe_data/climate_twente/CRU-TS3.21_ERA-40_ERA-Interim_daily_precipitation_1958_to_2010.nc
# average daily temperature [C]
#TavgMaps = $(FILE_PATHS:PathMeteo)\tavg
TavgMaps = C:/PCRGlobe_data/climate_twente/CRU-TS3.21_ERA-40_ERA-Interim_daily_temperature_1958_to_2010.nc
# daily reference evaporation (free water) [mm/day]
#E0Maps = $(FILE_PATHS:PathMeteo)\e
E0Maps = C:/PCRGlobe_data/climate_twente/CRU-TS3.21_ERA-40_ERA-Interim_daily_referencePotET_1958_to_2010.nc
# daily reference evapotranspiration (crop) [mm/day]
#ETMaps = $(FILE_PATHS:PathMeteo)\et
ETMaps = C:/PCRGlobe_data/climate_twente/CRU-TS3.21_ERA-40_ERA-Interim_daily_referencePotET_1958_to_2010.nc

#temperatureNC   = C:/PCRGlobe_data/climate_twente/CRU-TS3.21_ERA-40_ERA-Interim_daily_temperature_1958_to_2010.nc
#precipitationNC = C:/PCRGlobe_data/climate_twente/CRU-TS3.21_ERA-40_ERA-Interim_daily_precipitation_1958_to_2010.nc
precipitation_coversion = 1.00
evaporation_coversion = 1.00

# OUTPUT maps and timeseries
OUT_Dir = $(FILE_PATHS:PathOut)
OUT_MAP_Daily = 
#OUT_MAP_MonthEnd = Precipitation
#OUT_MAP_MonthTot = Precipitation
OUT_MAP_MonthAvg = 

#OUT_TSS_MonthTot = Precipitation

#-------------------------------------------------------
[SNOW]
#-------------------------------------------------------

# Number of Snow layers
NumberSnowLayers = 1
# up to which layer the ice melt is calculated with the middle temperature
GlacierTransportZone = 1

# Temperature lapse rate with altitude [deg C / m]
TemperatureLapseRate = 0.0065 
# Multiplier applied to precipitation that falls as snow
SnowFactor = 1.0
# Range [mm C-1 d-1] of the seasonal variation, SnowMeltCoef is the average value
SnowSeasonAdj = 1.0
# Average temperature at which snow melts
TempMelt =1.0
# Average temperature below which precipitation is snow
TempSnow = 1.0
# Snow melt coefficient: default: 4.0 
# SRM: 0.0045 m/C/day ( = 4.50 mm/C/day), Kwadijk: 18 mm/C/month (= 0.59 mm/C/day)  
# See also Martinec et al., 1998.
SnowMeltCoef = 0.004
IceMeltCoef  = 0.007

#--------------------------------------------------------------
# INITIAL CONDITIONS - Initial snow depth in snow zone A,B,C [mm]
SnowCover1Ini = NONE
SnowCover2Ini = NONE
SnowCover3Ini = NONE
SnowCover4Ini = NONE
SnowCover5Ini = NONE
SnowCover6Ini = NONE
SnowCover7Ini = NONE

[FROST]
# Snow water equivalent, (based on snow density of 450 kg/m3) (e.g. Tarboton and Luce, 1996)
SnowWaterEquivalent = 0.45
# Daily decay coefficient, (Handbook of Hydrology, p. 7.28)
Afrost = 0.97
# Snow depth reduction coefficient, [cm-1], (HH, p. 7.28)
Kfrost = 0.57
# Degree Days Frost Threshold (stops infiltration, percolation and capillary rise)
# Molnau and Bissel found a value 56-85 for NW USA.
FrostIndexThreshold = 56

#--------------------------------------------------------------
# INITIAL CONDITIONS (None either 0 or use init file)
FrostIndexIni = NONE

#-------------------------------------------------------
[SOIL]
#-------------------------------------------------------

PathTopo = $(FILE_PATHS:PathMaps2)\landsurface\topo
PathSoil = $(FILE_PATHS:PathMaps2)\landsurface\soil

# Topography mapsNetcdf\maps
# tangent slope, slope length and orographybeta 
tanslope = $(PathTopo)\tanslope.map
slopeLength = $(PathTopo)\slopeLength.map
orographyBeta = $(PathTopo)\orographyBeta.map
# maps of relative elevation above flood plains
relativeElevation = $(PathTopo)\dzRel_hydro1k.nc


# Soil properties
airEntryValue1 = $(PathSoil)\airEntryValue1.map
airEntryValue2 = $(PathSoil)\airEntryValue2.map
poreSizeBeta1 = $(PathSoil)\poreSizeBeta1.map
poreSizeBeta2 = $(PathSoil)\poreSizeBeta2.map
resVolWC1 = $(PathSoil)\resVolWC1.map
resVolWC2 = $(PathSoil)\resVolWC2.map
satVolWC1 = $(PathSoil)\satVolWC1.map
satVolWC2 = $(PathSoil)\satVolWC2.map
KSat1 = $(PathSoil)\KSat1.map
KSat2 = $(PathSoil)\KSat2.map
percolationImp = $(PathSoil)\percolationImp.map

clappAddCoeff   = 3.0
matricSuctionFC = 1.0
matricSuction50 = 3.33
matricSuctionWP = 156.0
maxGWCapRise    = 5.0

# Soil depth
firstStorDepth = $(PathSoil)\firstStorDepth.map
secondStorDepth = $(PathSoil)\secondStorDepth.map
soilWaterStorageCap1 = $(PathSoil)\soilWaterStorageCap1.map
soilWaterStorageCap2 = $(PathSoil)\soilWaterStorageCap2.map

[LandCoverType]

coverTypes = forest, grassland, irrPaddy, irrNonPaddy
coverTypesShort = f, g, i, n

[forest]
PathForest = $(FILE_PATHS:PathMaps2)\landcover\forest

# Parameters for the Arno's scheme:
forest_arnoBeta = 0
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

# other paramater values
forest_minTopWaterLayer = 0.0
forest_minCropKC        = 0.2
forest_minInterceptCap  = 0.001
forest_cropDeplFactor   = 0.0

forest_fracVegCover  = $(PathForest)\fracVegCover.map
forest_rootFraction1 = $(PathForest)\rootFraction1.map
forest_rootFraction2 = $(PathForest)\rootFraction2.map
forest_maxRootDepth  = $(PathForest)\maxRootDepth.map
forest_minSoilDepthFrac = $(PathForest)\minSoilDepthFrac.map
forest_maxSoilDepthFrac = $(PathForest)\maxSoilDepthFrac.map

forest_cropCoefficientNC = $(PathForest)\Global_CropCoefficientKc-Forest_30min.nc
forest_interceptCapNC    = $(PathForest)\interceptCapInputForest366days.nc
forest_coverFractionNC   = $(PathForest)\coverFractionInputForest366days.nc

# initial conditions:
forest_interceptStorIni = NONE
forest_topWaterLayerIni = NONE
forest_storUpp000005Ini = NONE
forest_storUpp005030Ini = NONE
forest_storLow030150Ini = NONE
forest_interflowIni     = NONE

[grassland]
PathGrassland = $(FILE_PATHS:PathMaps2)\landcover\grassland

# Parameters for the Arno's scheme:
grassland_arnoBeta = 0
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

# other paramater values
grassland_minTopWaterLayer = 0.0
grassland_minCropKC        = 0.2
grassland_minInterceptCap  = 0.001
grassland_cropDeplFactor   = 0.0

grassland_fracVegCover  = $(PathGrassland)\fracVegCover.map
grassland_rootFraction1 = $(PathGrassland)\rootFraction1.map
grassland_rootFraction2 = $(PathGrassland)\rootFraction2.map
grassland_maxRootDepth  = $(PathGrassland)\maxRootDepth.map
grassland_minSoilDepthFrac = $(PathGrassland)\minSoilDepthFrac.map
grassland_maxSoilDepthFrac = $(PathGrassland)\maxSoilDepthFrac.map

grassland_cropCoefficientNC = $(PathGrassland)\Global_CropCoefficientKc-grassland_30min.nc
grassland_interceptCapNC    = $(PathGrassland)\interceptCapInputgrassland366days.nc
grassland_coverFractionNC   = $(PathGrassland)\coverFractionInputgrassland366days.nc

# initial conditions:
grassland_interceptStorIni = NONE
grassland_topWaterLayerIni = NONE
grassland_storUpp000005Ini = NONE
grassland_storUpp005030Ini = NONE
grassland_storLow030150Ini = NONE
grassland_interflowIni     = NONE

[irrPaddy]
PathIrrPaddy = $(FILE_PATHS:PathMaps2)\landcover\irrPaddy

# Parameters for the Arno's scheme:
irrPaddy_arnoBeta = 0
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

# other paramater values
irrPaddy_minTopWaterLayer = 0.0
irrPaddy_minCropKC        = 0.2
irrPaddy_minInterceptCap  = 0.001
irrPaddy_cropDeplFactor   = 0.0

irrPaddy_fracVegCover  = $(PathIrrPaddy)\fracVegCover.map
irrPaddy_rootFraction1 = $(PathIrrPaddy)\rootFraction1.map
irrPaddy_rootFraction2 = $(PathIrrPaddy)\rootFraction2.map
irrPaddy_maxRootDepth  = $(PathIrrPaddy)\maxRootDepth.map
irrPaddy_minSoilDepthFrac = $(PathIrrPaddy)\minSoilDepthFrac.map
irrPaddy_maxSoilDepthFrac = $(PathIrrPaddy)\maxSoilDepthFrac.map

irrPaddy_cropCoefficientNC = $(PathIrrPaddy)\Global_CropCoefficientKc-irrPaddy_30min.nc
irrPaddy_interceptCapNC    = $(PathIrrPaddy)\interceptCapInputirrPaddy366days.nc
irrPaddy_coverFractionNC   = $(PathIrrPaddy)\coverFractionInputirrPaddy366days.nc

# initial conditions:
irrPaddy_interceptStorIni = NONE
irrPaddy_topWaterLayerIni = NONE
irrPaddy_storUpp000005Ini = NONE
irrPaddy_storUpp005030Ini = NONE
irrPaddy_storLow030150Ini = NONE
irrPaddy_interflowIni     = NONE

[irrNonPaddy]
PathIrrNonPaddy = $(FILE_PATHS:PathMaps2)\landcover\irrNonPaddy

# Parameters for the Arno's scheme:
irrNonPaddy_arnoBeta = 0
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

# other paramater values
irrNonPaddy_minTopWaterLayer = 0.0
irrNonPaddy_minCropKC        = 0.2
irrNonPaddy_minInterceptCap  = 0.001
irrNonPaddy_cropDeplFactor   = 0.0

irrNonPaddy_fracVegCover  = $(PathIrrNonPaddy)\fracVegCover.map
irrNonPaddy_rootFraction1 = $(PathIrrNonPaddy)\rootFraction1.map
irrNonPaddy_rootFraction2 = $(PathIrrNonPaddy)\rootFraction2.map
irrNonPaddy_maxRootDepth  = $(PathIrrNonPaddy)\maxRootDepth.map
irrNonPaddy_minSoilDepthFrac = $(PathIrrNonPaddy)\minSoilDepthFrac.map
irrNonPaddy_maxSoilDepthFrac = $(PathIrrNonPaddy)\maxSoilDepthFrac.map

irrNonPaddy_cropCoefficientNC = $(PathIrrNonPaddy)\Global_CropCoefficientKc-irrNonPaddy_30min.nc
irrNonPaddy_interceptCapNC    = $(PathIrrNonPaddy)\interceptCapInputirrNonPaddy366days.nc
irrNonPaddy_coverFractionNC   = $(PathIrrNonPaddy)\coverFractionInputirrNonPaddy366days.nc

# initial conditions:
irrNonPaddy_interceptStorIni = NONE
irrNonPaddy_topWaterLayerIni = NONE
irrNonPaddy_storUpp000005Ini = NONE
irrNonPaddy_storUpp005030Ini = NONE
irrNonPaddy_storLow030150Ini = NONE
irrNonPaddy_interflowIni     = NONE


#-------------------------------------------------------
[GROUNDWATER]
#-------------------------------------------------------

PathGroundwater = $(FILE_PATHS:PathMaps2)\groundwater

recessionCoeff = $(PathGroundwater)\recessionCoeff.map
specificYield = $(PathGroundwater)\specificYield.map
kSatAquifer = $(PathGroundwater)\kSatAquifer.map

#--------------------------------------------------------------
# INITIAL CONDITIONS
storGroundwaterIni = NONE

#-------------------------------------------------------
[WATERDEMAND]
#-------------------------------------------------------

PathWaterdemand = $(FILE_PATHS:PathMaps2)\landsurface\waterDemand

domesticWaterDemandFile = $(PathWaterdemand)\domesticWaterDemand30ArcMin.nc
industryWaterDemandFile = $(PathWaterdemand)\industryWaterDemand30ArcMin.nc
historicalIrrigationArea = $(PathWaterdemand)\irrigationArea30ArcMin.nc

#-------------------------------------------------------
# ROUTING MAPS and PARAMETERSD
#-------------------------------------------------------
[ROUTING]

PathRouting = $(FILE_PATHS:PathMaps2)\routing

routingMethod = accuTravelTime
# TODO: including kinematicWave

# Channel gradient
gradient    = $(PathRouting)\Global_ChannelGradient-RVB_30min.map
# manning coefficient:
manningsN = 0.04

# maximum number of days (timesteps) to calculate short term average inflow (default: 1 month = 1 * 30 days = 30)
maxTimestepsToAvgDischargeShorTerm = 30.
# maximum number of days (timesteps) to calculate long term average discharge (default: 5 years = 5 * 365 days = 1825)
maxTimestepsToAvgDischargeLongTerm = 1825.



# composite crop factors for WaterBodies 1 per month: 
cropCoefficientWaterNC   = $(PathRouting)\cropCoefficientForOpenWater.nc


# initial conditions:
waterBodyStorageIni      = NONE
channelStorageIni        = NONE
readAvlChannelStorageIni = NONE
#
avgChannelDischargeIni   = NONE
m2tChannelDischargeIni   = NONE
avgBaseflowIni           = NONE
riverbedExchangeIni      = NONE
# number of days (timesteps) that have been performed for spinning up routing module (i.e. resvStorageIni, channelStorageIni and avgDischargeIni)
timestepsToAvgDischargeIni = NONE



OUT_Dir = $(FILE_PATHS:PathOut)
OUT_MAP_Daily = discharge
OUT_MAP_MonthEnd = 
OUT_MAP_MonthTot = 

OUT_TSS_Daily = discharge
OUT_TSS_MonthEnd = discharge
OUT_TSS_AnnualEnd = discharge



#-------------------------------------------------------
# LAKES AND RESERVOIRS
#-------------------------------------------------------
[LAKES_RESERVOIRS]

PathLakes = $(FILE_PATHS:PathMaps2)\routing\reservoirs


waterBodyInputNC = $(PathLakes)\waterBodies30min.nc

# min width used in weir formula (# TODO: define minWeirWidth based on the GLWD, GRanD database and/or bankfull discharge formula) 
minWeirWidth = 10.
# lower and upper limits at which reservoir release is terminated and at which reservoir release is equal to long-term averaged
minResvrFrac = 0.10
maxResvrFrac = 0.75


# initial conditions:
waterBodyStorageIni      = NONE
avgInflowLakeReservIni   = NONE
avgOutflowDischargeIni   = NONE


#-------------------------------------------------------
[INFLOW]
#-------------------------------------------------------

# if option inflow = true
# the inflow from outside is added at inflowpoints


# OPTIONAL: nominal map with locations of (measured)inflow hydrographs [cu m / s]
InflowPoints = $(FILE_PATHS:PathMaps)\inflowpoints.map
# OPTIONAL: observed or simulated input hydrographs as time series [cu m / s]
#Note that identifiers in time series correspond to InflowPoints
QInTS = nile_assiut.tss



